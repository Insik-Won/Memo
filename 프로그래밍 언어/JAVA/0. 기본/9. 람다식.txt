■ 1. 람다식

◎ 함수형 인터페이스
    - 함수형 인터페이스는 람다식을 받기 위해 사용되는 인터페이스이다.
    - 함수형 인터페이스의 조건은 미구현된 메소드가 하나만 있는 것이다. 즉 기본 구현된 메소드나 정적 메소드가 있어도 미구현된 메소드 하나만 있으면 함수형 인터페이스가 된다.
    - @FunctionalInterface 어노테이션을 인터페이스에 적용하면 인터페이스가 함수형 인터페이스의 조건에 맞지 않을 시 에러를 던진다.
    
◎ 람다식
    - (인자1, 인자2, ...) -> { 내용 }
    - 람다식은 위와 같은 형태를 가진다. 인자가 하나 밖에 없으면 소괄호는 생략해도 되며 내용이 식 하나이면 대괄호 생략, return도 생략 가능하다.
    - 인자 개수, 인자 타입, 반환 타입이 같다면 함수형 인터페이스인 타입의 변수로 람다식을 받을 수가 있다.
        - <code>
            @FunctionalInterface
            public interface IntBinaryOperator
            {
                int op(int lhs, int rhs);
            }
            
            IntBinaryOperator add = (lhs, rhs) -> lhs + rhs;
            
            println(add(1,2));
        - </code>
        
◎ 메소드 참조 
    - 클래스명::정적메소드명, 객체명:메소드명을 통해 객체의 메소드나 정적 메소드도 람다식처럼 사용할 수 있다.
    - 클래스명::new 를 통해 생성자도 람다식처럼 사용할 수 있다.
        - <code>
            import java.util.function.*;
            
            public class Main
            {
                public static void Main(String[] args)
                {
                    Consumer<String> foo = System.out.println;
                    foo.accept("Hello World!");
                }
            }
        - </code>
        