■ 4. 상속과 인터페이스

◎ 클래스의 상속
    - 객체지향에는 상속이라는 개념이 있다. 클래스1이 클래스2를 상속한다고 하면 클래스1은 클래스2의 모든 것을 가지게 되며 거기에 추가로 필드나 메소드를 정의할 수 있다.
    - 자바에서 클래스 상속은 extends 키워드를 써서 다음과 같이 할 수 있다.
        - <code>
            class Parent            
            {
                public void printMe()
                {
                    System.out.println("I am Parent.");
                }
            }
            class Child extends Parent
            {
                public void printMe()
                {
                    System.out.println("I am Child!");
                }
            }
        - </code>
        
        - 상속은 클래스 한개만 할 수 있다. 다중 상속이 불가능하다.
        - 부모 클래스의 메소드를 자식 클래스에서 다시 정의하는 걸 오버라이드(override)라고 한다. 부모 타입의 변수에서 자식 타입의 객체를 받아도 이 오버라이딩한 메소드가 적용이 된다.
        - 반면 필드는 오버라이딩이 안된다. 만약 부모 클래스의 필드를 자식 클래스에서 재정의하면 부모 클래스의 필드가 숨겨진다.
        - 만약 클래스 이름/메소드명 앞에 final을 붙이면 클래스는 상속이 불가능해지며 메소드는 오버라이딩이 불가능해진다.

◎ this와 super
    - this는 객체 자신을 가리키는 변수이다. 지역변수와 이름이 겹치는 필드는 this를 통해 접근할 수 있다.
    - super는 객체의 부모를 가리키는 변수이다. super를 통해서 부모의 필드나 메소드에 접근할 수 있다.
        - 또한 자식 클래스의 생성자에서 super를 통해 부모 클래스의 생성자 또한 호출할 수 있다.
        
◎ 인터페이스
    - 인터페이스는 선언만 하고 정의는 하지 않은 메소드만 있는 클래스이다. 이 인터페이스를 통해 시스템과 소통하거나 구현할 것을 명시해둘 수 있다.
    - 자바에서 인터페이스 구현은 implements 키워드를 써서 다음과 같이 할 수 있다.
        - <code>
            interface Printable
            {
                void print();
            }
            class Printer implements Printable
            {
                public void print()
                {
                    System.out.println("I am Printer. Where is a paper");
                }
            }
        - </code>
    
    - 인터페이스는 구현부가 없기 때문에 다중상속이 가능하다. (구현부가 없어 겹치지 않는다.)
    - 인터페이스가 인터페이스를 상속할 수도 있다.
    - 인터페이스에 static 메소드를 선언하고 구현할 수 있다.
    - 인터페이스의 메소드 이름 앞에 default를 붙여 기본 구현을 명시해둘 수도 있다.
    
◎ 추상 클래스
    - 추상 클래스는 정의된 메소드와 정의되지 않은 메소드가 공존하는 클래스이다. 주 용도는 전체 행동의 틀을 정의하고 세부 행동의 구현은 자식에게 맡기는 것이다.
    - 추상 클래스를 만들려면 class 앞에 abstract 키워드를 붙이면 되며 정의되지 않은 메소드, 추상 메소드는 반환명 앞에 abstract 키워드를 붙이면 된다.
    
◎ 무명 클래스
    - 무명 클래스는 인터페이스나 클래스를 임시로 구현해서 객체로 만드는 방법이다. 클로저를 구현하는 방법 중 하나이다.
        - <code>
            interface Printable
            {
                void print();
            }
            
            public class Main 
            {
                public static void Main(String[] args)
                {
                        Printable printer = new Printable() 
                        {
                            void print()
                            {
                                System.out.println("Hello World!");
                            }
                        }
                        
                        printer.print();
                }
            }
        - </code>