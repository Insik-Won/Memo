■ 11. 자바의 구조

◎ 출처 : https://www.guru99.com/difference-between-jdk-jre-jvm.html#:~:text=JDK%20is%20a%20software%20development%20kit%20whereas%20JRE%20is%20a,JVM%20is%20Java%20Virtual%20Machine.

◎ 설명
    - JDK
        - JDK는 소프트웨어 개발 환경으로 애플릿이나 자바 어플리케이션을 만들기 위해 사용된다. 
        - JDK는 Java Development Kit 약자이다.
        - JDK는 Windows와 macOS, Solaris, Linux에서 사용할 수 있다.
        - JDK는 한 컴퓨터에 여러 버전이 설치되어있을 수 있다.
    
    - JRE
        - JRE는 다른 소프트웨어를 돌리기 위해 제작된 소프트웨어이다.
        - JRE는 Java Runtime Environment의 약자이다.
        - JRE는 클래스 라이브러리, 클래스 로더, 자바 가상머신(JVM)을 포함하고 있다.
        - 자바 프로그램을 돌리기 위해선 JRE가 필요하다.
        - JRE는 JDK에 포함되어 있다.
        
    - JVM
        - JVM은 자바 코드나 어플리케이션을 돌리기 위한 런타임 환경을 제공하는 엔진이다.
        - JVM은 Java Virtual Machine의 약자이다.
        - JVM은 자바 바이트코드를 기계어로 변환하는 역할을 한다.
        - JVM은 JRE의 일부라 따로 다운로드하거나 설치할 수 없다. 그러므로 JVM을 설치하기 위해선 JRE를 설치해야 한다.
        
◎ 사용 이유
    - JDK
        - JDK는 자바 프로그램을 만들기 위한 도구와 그 프로그램을 돌리기 위한 JRE를 가지고 있다.
        - JDK는 컴파일러, 자바 어플리케이션 런쳐, 애플릿뷰어 등을 포함하고 있다.
        - JDK의 컴파일러는 자바 코드를 바이트 코드로 변환한다.
        - JDK의 어플레케이션 런쳐는 JRE를 시작하고, 필요한 클래스를 불러오고, 메인 함수를 호출하는 역할을 한다.
        
    - JRE
        - JRE는 클래스 라이브러리, JVM, 그 외 필요한 파일을 가지고 있는 반면 자바 개발에 필요한 디버거나 컴파일러 등을 가지고 있지 않다.
        - JRE는 중요한 패키지와 클래스, math나 swing, util, lang, awt, 그 외 여러 런타임 라이브러리를 가지고 있다.
        - 자바 애플릿을 돌리기 위해선 JRE가 시스템에 무조건 깔려있어야 된다.
        
    - JVM
        - JVM은 플랫폼에 상관없이 자바 소스 코드를 돌리는 역할을 한다.
        - 방대한 양의 라이브러리와 툴, 프레임워크를 가지고 있다.
        - 자바 프로그램을 컴파일하기만 하면 어느 플랫폼에서든 프로그램을 돌릴 수 있고 시간을 절약할 수 있다.
        - JVM은 자바 코드를 기계어로 바꾸는 JIT(Just-in-Time) 컴파일러를 갖추고 있기 때문에 일반적인 어플리케이션처럼 프로그램을 더 빨리 돌릴 수 있다.
        
◎ 특징
    - JDK
        - JDK의 특징은 JRE의 특징을 포함한다.
        - JDK는 컴파일러, 디버거와 같이 개발을 돕는 여러 도구를 가지고 있다.
        - JDK는 자바 코드를 짜고 실행하는 환경을 제공한다.
        - 여러 OS 환경에 설치될 수 있다.
        - 한 catch 블럭에서 여러 예외를 처리할 수 있게 해주거나 타입 추론에 사용되는 <> 연산자를 사용할 수 있게 해주는 등의 문법적 설탕을 제공한다.
        
    - JRE
        - JRE는 JVM을 구동시키는 여러 도구를 제공한다.
        - JRE는 Java Web Start나 Java Plug-in과 같은 여러 구동 기술을 보유하고 있다.
        - JRE를 통해 자바 코드를 쉽게 구동할 수 있지만 그걸로 자바 프로그램을 짜고 컴파일할 수는 없다.
        - JRE는 Java Database Connectivity(JDBC), Remote Method Invocation(RMI), Java Naming and Directory Interface(JNDI) 등등의 통합 라이브러리를 가지고 있다.
        - JRE는 JVM과 Java HotSpot virtual machine client를 포함한다.
        
    - JVM
        - JVM은 클라우드 환경이나 기기 환경에서 어플리케이션을 돌릴 수 있게 해준다.
        - JVM은 바이트 코드를 기기 의존적인 코드로 바꿔준다.
        - JVM은 메모리 관리나 보안, 가비지 컬렉터 등의 자바 필수 함수를 제공한다.
        - JVM은 JRE에 있는 라이브러리와 파일로 프로그램을 구동한다.
        - JDK와 JRE 모두 JVM을 가지고 있다.
        - JVM은 자바 코드를 줄 단위로 실행할 수 있으며 이 때문에 인터프리터라고도 불린다.
        - JVM은 손쉽게 커스터마이징이 가능하다. 예를 들면 최소/최대 저장공간을 지정해줄 수 있다.
        - JVM은 하드웨어랑 운영체제에 독립적이다. 그러므로 자바 프로그램을 한번 작성하면 어디든 돌아가게 할 수 있다.
        
◎ 작동 방식
    - JDK
        - JDK와 JRE : JDK는 JVM과 클래스 라이브러리가 들어있는 JRE에서 돌아가는 자바 프로그램을 짤 수 있게 해준다.
        - 클래스 라이브러리(JRE에 포함) : 자바 프로그램이 런타임에 불러올 수 있는 동적 라이브러리(dll)의 집합이다.
        - 컴파일러 : 텍스트 파일을 읽어서 자바 클래스 파일로 컴파일하는 자바 프로그램이다. 여기서 자바 클래스 파일은 컴파일의 결과 중 일반적인 형태이며 자바 바이트 코드를 포함한다. 자바의 기본 컴파일러는 Javac이다.
        - 디버거 : 디버거는 자바 프로그램을 테스트하고 디버깅할 수 있께 해주는 자바 프로그램이다.
        - JavaDoc : JavaDoc은 Sun Microsystems가 제공하는 자바의 설명서이다. JavaDoc은 소스 프로그램에서 API 문서를 HTML 형태로 만들기 위해 사용된다.
        
    - JRE
        - JRE는 다음과 같은 행동을 거쳐 자바 프로그램을 구동한다.
            - 1. 클래스로더 : 자바 프로그램 구동에 필요한 여러 클래스를 불러오는 역할을 한다. 여기서 JVM은 3가지 클래스로더를 사용한다: boostrap 클래스로더, extensions 클래스로더, system 클래스로더.
            - 2. 바이트코드 검증기 : 인터프리터가 코드에 얽히는 일이 없게 바이트코드를 검증하는 역할을 한다.
            - 3. 인터프리터 : 클래스가 불러지면 코드가 검증되고 인터프리터가 코드를 한줄한줄 읽어내려간다.
            - 4. 런타임 : 프로그래밍에서 주로 프로그램이 구동되고 있는 동안을 나타내는 시스템이다.
            - 5. 하드웨어 : 자바 네이티브 코드가 컴파일되면, 프로그램은 기기 의존적인 환경에서 구동하게 된다.
            
    - JVM
        - 클래스로더 : 클래스 파일을 불러오기 위해 사용되는 시스템이다. 클래스로더는 크게 세가지 일을 수행한다: 불러오기, 클래스간 연결, 초기화.
        
        - 메모리
            - 메소드 영역 : 메타데이터와 같은 클래스의 구조, 메소드, 런타임 상수가 들어있는 곳이다.
            - 힙 영역 : 모든 객체, 배열, 인스턴스가 저장되는 공간이다. 여러 스레드가 이 공간을 공유한다.
            - 스택 영역: 지역 변수, 반환값이 저장되는 공간이다. 모든 스레드는 각각 자신만의 스택 영역을 가지며 스레드가 만들어질 때 같이 생성된다. 메소드가 호출될 떄 새 영역이 생기며 메소드가 끝나면 그 영역은 사라진다.
            - PC 레지스터 : 자바 가상 머신이 현재 실행하고 있는 명령의 주소가 담겨있다. 자바에선 각 스레드가 고유하고 독립된 PC 레지스터를 가진다.
            - 네이티브 메소드 스택 영역: 기기의 기본 라이브러리에 의존적인 네이티브 코드의 명령을 담고 있다. 기존에 있는 힙이나 스택을 사용해 메모리를 할당한다.
            
        - 실행 엔진 : 소프트웨어나 하드웨어, 혹은 전체 시스템을 테스트하는 소프트웨어이다. 이 엔진은 테스트 결과물의 정보를 절대 갖고 있지 않는다.
        - 네이티브 메소드 인터페이스 : 이 인터페이스는 프로그래밍 프레임워크이다. 자바 코드가 라이브러리나 기존 어플리케이션에 호출될 수 있게 한다.
        - 네이티브 메소드 라이브러리 : 실행 엔진이 필요한 네이티브 라이브러리(C, c++)의 집합이다.