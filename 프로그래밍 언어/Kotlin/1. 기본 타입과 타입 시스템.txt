■ 1. 기본 타입과 타입 시스템

◎ 기본 타입
	- Number
		- Byte : 8비트 정수
		- Short : 16비트 정수
		- Int : 32비트 정수
		- Long : 64비트 정수
		- Float : 32비트 실수
		- Double : 64비트 실수
	- Boolean : 논리형 
	- Character : 유니코드 문자
	- String : 문자열
	- Array<T> : 배열
	
	- 정수 타입 이름 앞에 U를 붙여서 unsigned로 만들 수 있다.
	- 비트연산자는 shl, shr, ushr, and, or, xor, inv가 있으며 Int와 Long에만 적용된다.
	- NaN은 자신과 같고 모든 실수값보다 크다. 또한 -0.0은 0.0보다 작다.
	- Character는 정수로 취급하지 않는다. 정수로 취급할려면 toInt() 메소드를 써야 한다.
	- 숫자 리터럴
		- 접미사 L : Long 타입
		- 접미사 u,U : unsigned 타입
		- 접미사 f : Float 타입
		- 8진법 정수 리터럴은 지원하지 않는다.
		- 중간에 _를 넣어 가독성을 높일 수 있다.
	- """ ... """를 써서 여러 줄의 문자열을 쓸 수 있다.
	- "${...}"를 써서 문자열 보간을 할 수 있다. 
		- 중괄호는 내용이 이름 하나면 생략할 수 있다.
		- 만약 '$'를 넣고 싶으면 '\$'를 쓰거나 "${'$'}"를 써야한다.
	
◎ 타입 시스템
	- 코틀린은 다음과 같은 기본 타입을 가지고 있다.
		- Any : Java의 Object이다.
		- Unit : Java의 void이다. 또한 싱글턴 타입이라 값이 있다.
		- Nothing : 값이 존재하지 않는 타입이다. 생성자가 private이다. 모든 타입의 자식 타입이며 throw의 반환형이기도 하다.
	- 코틀린의 타입은 기본적으로 nonnull이다. 만약 null을 포함할려면 ?를 붙여야 된다.
	
◎ 자바의 타입 시스템과 호환
	- 코틀린과 자바의 타입 시스템은 약간 다르다. 그래서 코틀린에서 자바의 타입은 !가 뒤에 붙는 형태로 인식이 된다. 
		- T! : nullable일 수도, 아닐 수도 있다.
		- (Mutable)Collection<T>! : 컬렉션이 mutable/nullable일 수도 아닐 수도 있다.
		- Array<(out) T>! : T와 T의 하위 타입을 가지는 배열이며 nullable일 수도 아닐 수도 있다.
		
◎ 타입 별칭
	- typealias 키워드를 이용해 어느 타입에 별명을 부여할 수 있다. 또한 제네릭도 가능하다.
		- typealias NodeSet = Set<Network.Node>