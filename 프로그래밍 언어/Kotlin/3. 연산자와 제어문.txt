■ 3. 연산자와 제어문

◎ 연산자
	- 'A ?: B' : 엘비스 연산자, A가 null이면 B를 반환한다.
	- 'A?.B' : 안전한 멤버호출 연산자, A가 null이면 null을 반환하고 아니면 A.B를 반환한다.
	- 'A!!' : A를 nonnull 타입으로 바꾼다. A가 null이면 NullPointerException을 던진다.
	
	- 'A is B' : A가 B 타입인지를 반환한다.
	- 'A !is B' : A가 B 타입이 아닌지를 반환한다.
	- 'A as B' : A를 B 타입으로 바꾼다. 
	- 'A as? B' : A를 B 타입으로 바꾸며 A가 null이면 null을 반환한다.
	
	- 'A {범위표현 연산자} B' : 범위표현이며 반환형은 IntRange이다.
		- '..' : B를 포함한다.
		- 'until' : B를 포함하지 않는다.
		- 'downTo' : B를 포함하며 역순이다.
	
	- 'A in B' : 범위표현 B에 A가 포함되는지를 반환한다.
	- 'A !in B' : 범위표현 B에 A가 포함되지 않는지를 반환한다.
	
◎ 조건문
	- 코틀린의 모든 조건문은 식이다. 마지막 표현식이 반환된다.
	- 조건문에서 조건식을 통해 타입이 확정되면 그 안에서 그 타입처럼 쓸 수 있다.
	
	- if : 일반적인 if문이다.
	- when : 패턴매칭문이다. is와 in 같은 거의 모든 표현식이 사용가능하다. else는 문법적으로 필수이다.
		- <code>
			when(A) {
				B -> ...
				C -> ...
				D,E -> ...
				else -> ...
			}
		- </code>
		
◎ 반복문
	- 반복문 앞에 '레이블명@' 을 붙여서 해당 반복문에 레이블을 붙여줄 수 있다.
	- while, do while : 일반적인 while문이다.
	- for-in : C스타일 for문은 제거됬고 foreach문만 남았다.
		- <code>
			for (A in B) {
				...
			}
		- </code>
		
◎ 분기문
	- 분기문 뒤에 '@레이블명'을 붙여서 해당 레이블에 해당하는 곳을 빠져나올 수 있다.
	- return : 가장 가까운 일반함수나 익명 함수를 빠져나온다.
	- break : 가장 가까운 반복문을 빠져나온다.
	- continue : 가장 가까운 반복문의 다음 루프로 진행한다.
	