■ 2. 변수와 함수

◎ 상수와 변수
	- 코틀린에서 상수는 val, 변수는 var로 선언하며 타입은 변수명 뒤에 쓴다. 초기화 시 타입은 생략 가능하다.
		- var num:Int = 5
		- val str:String = "Hello World!"
		
◎ 함수
	- 코틀린에서 함수는 다음과 같이 구현된다.
		- fun 함수명 (인자명: 인자타입, ...): 반환타입 { ... }
		- Unit은 반환하지 않는 타입이며 생략 가능하다.
	- 매개변수는 모두 val로 취급된다.
	- 디폴트 매개변수와 명명 매개변수를 지원한다.
	- 함수 내 표현식이 하나 밖에 없다면 중괄호를 없애고 '='로 처리할 수 있다.
	
	- 매개변수 앞에 vararg 키워드를 붙이면 가변인자가 되며 배열처럼 사용할 수 있다.
	- 함수 선언 앞에 tailrec을 붙여서 꼬리재귀 함수로 만들 수 있다.
	- 함수 선언 앞에 inline을 붙여서 핸들러 처리 함수의 매개변수를 인라인시킬 수 있다.
	- 매개변수 앞에 noinline을 붙여서 inline 함수에서 해당 매개변수의 핸들러를 인라인시키지 않을 수 있다.
	- 매개변수 앞에 crossinline을 붙여서 inline 함수에서 해당 매개변수의 핸들러가 중간에 return 하지 않도록 할 수 있다.
	- 함수 이름에 확장하고자 하는 타입과 온점을 넣어서 확장 함수를 만들 수 있다.
	
◎ 람다식
	- 람다식은 함수를 즉석으로 만드는 방식이다.
	- 타입은 다음과 같이 표기한다: (인자타입들...)->반환타입
	- 식은 다음과 같이 쓴다: {인자1, 인자2, ... -> 몸체}
	- 인자가 하나만 있으면 인자 부분을 생략하고 it으로 그 인자를 표시할 수 있다.
	- 인자가 없으면 인자 부분을 생략할 수 있다.
	- 함수의 마지막 인자가 람다식이면 소괄호 밖으로 람다식을 꺼낼 수 있다.
	- 함수의 인자가 하나인데 람다식이면 소괄호도 생략할 수 있다.
	- 람다식의 return에 @함수명을 붙여서 그 함수에 전달된 람다식만 끝낼 수 있다.
	- 람다 타입 앞에 '확장할 클래스명.'을 붙이면 해당 람다식은 확장 함수로 취급되며 이 람다식 안에서 해당 클래스의 멤버에 접근할 수 있다.
	
◎ 익명함수
	- 일반 함수 선언에 이름만 뺴면 익명 함수 선언이 된다. 
	- 익명 함수는 람다식과 달리 일반 함수 취급을 받으며 고차함수에 그 자체를 넘길 수가 있다.