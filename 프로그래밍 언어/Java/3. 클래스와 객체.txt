■ 3. 클래스와 객체

◎ 클래스와 객체
	- 클래스는 객체의 모양과 행동을 결정한다. 하나의 타입이다.
	- 객체는 클래스의 실현으로 프로그램 상에서 실제로 행동한다.
	
◎ 패키지와 클래스
	- 자바에서 클래스/인터페이스는 파일당 클래스 하나만 있어야 된다.
	- 패키지는 클래스/인터페이스의 모음이다.
	
◎ 클래스의 선언
	- 클래스는 다음과 같이 선언한다.
		- <code>
			class 클래스이름 {
				public 타입 필드이름;
				
				public 클래스이름() {
					생성자 내용;
				}
				
				public 반환타입 메소드이름(타입1 인자1, 타입2, 인자2, ...) {
					내용;
				}
			}
		- </code>
		
		- 클래스와 같은 이름을 가지는 메소드를 생성자라고 하며 new를 통해 객체가 생성될 때 생성자가 호출된다.
			- 생성자를 만들지 않으면 아무 일도 하지 않는 기본 생성자가 만들어진다.
		- 필드는 멤버변수라고도 하며 객체가 가지는 값이 된다. 
		- 메소드는 멤버함수라고도 하며 객체가 가지는 함수가 된다.
		
◎ 클래스의 사용
	- 클래스 변수는 다음과 같이 선언할 수 있다: 클래스명 변수이름;
	- 객체는 다음과 같이 만들 수 있다: 변수이름 = new 클래스명();
		- new를 통해 객체의 메모리 공간이 할당되고 생성자가 호출되고, 그 객체의 주소가 변수에 대입된다.
	- 클래스의 필드는 다음과 같이 사용한다: 객체이름.필드명
	- 클래스의 메소드는 다음과 같이 사용한다: 객체이름.메소드명(인자1, 인자2, ...)
	
◎ 접근 지정자
	- 자바의 접근 지정자는 4개가 있다.
		- public : 접근에 제한이 없다.
		- protected : 동일 패키지와 상속받은 클래스 내에서만 사용가능하다.
		- default : 동일 패키지 내에서만 사용가능하다. 기본 옵션이다.
		- private : 동일 클래스 내에서만 사용가능하다.
	- 접근 범위를 지정해줌으로써 예상치 못한 곳에서 필드나 메소드를 건드리는 일을 막을 수가 있다.
	
◎ static
	- static을 클래스의 필드/메소드 앞에 붙이면 그 필드/메소드는 객체에 속하는 게 아닌 클래스에 속하게 된다. 
	- 이러한 필드/메소드를 정적 필드/메소드라고 부른다.
	- 사용은 클래스이름.필드명, 클래스이름.메소드명()으로 사용할 수 있다.
	- 클래스 안에 static 블럭을 한개 이상 두어서 클래스 로드 시 static 블럭을 실행하게 할 수 있다.
		- <code name="사용 예">        
			static int[] values = new int[10];
			static {
				System.out.println("static 블럭 실행!");
			}
		- </code>