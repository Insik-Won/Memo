■ 98. 유용한 클래스

◆ 컬렉션

◎ 자바의 컬렉션 
	- 컬렉션은 자료를 저장하기 위한 자료구조의 구현체를 뜻한다.
	- 자바는 컬렉션을 java.util 패키지를 통해 Java Collection Framework이라는 이름으로 제공한다.
	- 자바의 컬렉션은 크게 5가지 인터페이스로 나늰다: List, Deque, Queue, Set, Map
		- List와 Queue, Set는 Iterable 인터페이스를 상속받은 Collection 인터페이스를 상속받는다.
		- Deque는 Queue를 상속받는다.
		- Map은 독립된 인터페이스이다. 
	- 동기화 컬렉션은 java.util.concurrent 패키지를 통해 제공한다.
		
◎ Obsolete된 컬렉션
	- Vector와 Stack, HashTable 클래스는 Obsolete되었다. 그 대안으로 ArrayList, ArrayDeque, HashMap을 사용하길 추천한다.
		
◎ List
	- List는 순서가 있고 중복을 허용하며 인덱스 접근을 할 수 있는 인터페이스이다.
	- 구현체는 ArrayList, LinkedList, CopyOnWriteArrayList 등이 있다.
	
◎ Queue, Deque
	- Queue는 원소의 추가와 삭제, 그리고 특정 순서에 따라 원소를 꺼내는 동작을 정의한 인터페이스이다.
	- Deque는 Queue를 상속하며 Queue는 단방향에서 동작한다면 Deque는 양방향에서 동작하는 컬렉션의 인터페이스이다.	
	- 그 순서는 보통은 FIFO이지만 경우에 따라 LIFO가 될 수도 있고 우선순위가 될 수도 있다.
	
	- 하위 인터페이스는 BlockingQueue, TransferQueue, BlockingDeque가 있다.
	- 구현체는 ArrayDeque, ArrayBlockingQueue, LinkedList, ConcurrentLinkedQueue/Deque, BlockingLinkedQueue/Deque, LinkedTransferQueue, PriorityQueue, PriorityBlockingQueue, DelayQueue, SynchronousQueue 등이 있다.
	
◎ Set, Map
	- Set과 Map은 중복을 불허하는 집합 인터페이스이다.
	- Set은 자료가 개체 하나이고 Map은 자료가 Key와 Value로 이루어져있다.
	
	- 하위 인터페이스는 SortedSet/Map, NavigableSet/Map, ConcurrentMap, ConcurrentNavigableMap이 있다.
	- 구현체는 HashSet/Map, TreeSet/Map, LinkedHashSet/Map, ConcurrentHashSet/Map, ConcurrentSkipListSet/Map, CopyOnWriteArraySet, EnumSet, Properties(Map) 등이 있다.

◎ Collections 클래스
	- Collections 클래스는 컬렉션과 관련된 기능성 함수를 제공하는 클래스이다.	
	
	- empty{Enumeration/Iterator/List/ListIterator/Map/Set} : 빈 컬렉션/반복자를 반환한다.
	- synchronized{Collection/List/Set/Map/SortedSet/SortedMap} : 컬렉션을 받아 동기화 컬렉션을 반환한다.
	- unmodifiable{Colleciton/List/Set/Map/SortedSet/SortedMap} : 컬렉션을 받아 불변 컬렉션을 반환한다.
	- checked{Collection/List/Set/Map/SortedSet/SortedMap} : 컬렉션과 타입을 받아 해당 타입만 들어올 수 있는 컬렉션을 반환한다. (동적으로 타입을 체크한다.)
	- singleton{List//Map} : 객체를 받아 해당 객체만 가지는 List/Set/Map 객체를 반환한다.
	
	- asLifoQueue : Deque 객체를 받아 LIFO 순서를 가지는 Queue 객체를 반환한다.
	- max/min : 해당 컬렉션에서 가장 큰/작은 객체를 반환한다.
	- shuffle/sort : List 객체를 무작위로 섞는다/순서에 따라 정렬한다.
	- list : Enumeration 객체를 받아 ArrayList 객체로 반환한다.
		
		
◆ null 처리 관련 

◎ 참조 : https://futurecreator.github.io/2018/08/14/java-8-optional/

◎ Optional 클래스
	- JAVA 8 이후 null 처리를 간편하게 하기 위해 Optional<T> 클래스가 들어왔다.
	
	- Optional.empty() : 빈 Optional 객체를 생성한다.
	- Optional.of() : null이 아닌 객체를 Optional 객체로 만든다.
	- Optonal.ofNullable() : null일 수도 있는 객체를 Optional 객체로 만든다.
	
	- get : 내용을 반환한다. null이면 NoSuchElementException을 던진다.
	- isPresent : 내용이 있는지 반환한다.
	- ifPresent : Consumer 함수를 받아 내용이 있으면 Consumer 함수를 실행한다.
	- orElse : 객체를 받아 내용이 null이면 객체를 반환한다.
	- orElseGet : Supplier 함수를 받아 내용이 null이면 Supplier의 반환값을 반환한다.
	- orElseThrow : Supplier<T extends Throwable> 함수를 받아 내용이 null이면 Supplier의 반환값을 던진다.
	
	- filter : Predicate 함수를 받아 내용이 있고 Predicate에도 부합하면 그대로를, 아니면 빈 Optional 객체를 반환한다.
	- map : Function<T, U>를 받아 내용이 있으면 함수를 거쳐 Optional<U> 객체를, 없으면 빈 Optional 객체를 반환한다.
	- flatMap : Function<T, Optional<U>>를 받아 내용이 있으면 함수를 거쳐 Optional<U> 객체를, 없으면 빈 Optional 객체를 반환한다.


◆ 스트림

◎ 참조 : https://futurecreator.github.io/2018/08/26/java-8-streams/

◎ Stream에 대해
	- JAVA 8 이전에는 배열/컬렉션을 다루는 방법은 for/foreach를 통해 요소를 하나씩 꺼내서 다루는 방법이 주된 방법이었다. 간단한 경우면 상관 없지만 로직이 복잡해지고 메소드를 나누면 루프를 여러번 도는 경우가 생겼다.
	- 자바는 이를 해결하기 위해  JAVA 8부터 java.util.stream 패키지에서 Stream 클래스를 제공한다. 
	- Stream을 적용하면 배열/컬렉션에 함수형 패러다임을 적용시키는 것이 가능하며 병렬처리도 가능하다.
	- 스트림에 대한 내용은 크게 세가지로 나눌 수 있다: 생성하기, 가공하기, 결과 만들기
	
◎ 생성하기
	- Stream.of() : 배열/컬렉션을 통해 스트림을 만든다.
	- Stream.empty() : 빈 스트림을 만든다.
	- stream.parrelStream() : 스트림을 병렬 스트림으로 만든다.
	- stream.sequential() : 병렬 스트림을 다시 일반 스트림으로 만든다.
	- stream.isParellel() : 스트림이 병렬인지 확인한다.
	- Stream.concat() : 두 스트림을 합쳐 새로운 스트림을 만든다.
	
	- Arrays.stream() : 배열을 통해 스트림을 만든다.
	- collection.stream() : 컬렉션을 통해 스트림을 만든다.
	- collection.parellelStream() : 컬렉션을 통해 병렬처리 스트림을 만든다.
	
	- Stream.builder().add()...build() : 컬렉션 빌더를 만들어 스트림을 만든다.
	- Stream.generate() : Supplider 함수를 받아 반환값을 반환하는 무한 스트림을 만든다.
	- Stream.iterate() : 초깃값과 해당값을 다루는 람다를 이용해 무한 스트림을 만든다.
	
	- {IntStream/LonStream/DoubleStream}.{range/rangeClosed}() : 기본 타입의 시작/종료값을 받아 범위 스트림을 만든다.
	- {intStream/longStream/doubleStream}.boxed() : 기본 타입 스트림을 래퍼 클래스 스트림으로 만든다.
	- random.{ints/longs/doubles}() : 갯수를 받아 난수 스트림을 생성한다.
	
◎ 가공하기
	- filter : Predicate 함수를 받아 해당 함수를 만족하는 객체만 통과시킵니다.
	- map : Function 함수를 받아 해당 함수를 거칩니다.
	- flatMap : Stream을 반환하는 Function 함수를 받아 중첩 구조를 한단계 제거하고 단일 컬렉션으로 만듭니다.
	- sorted : 스트림을 정렬합니다.
	- peek : Consumer 함수를 받아 해당 함수를 거칩니다.
	- limit : 스트림의 원소수를 제한합니다.
	- skip : 횟수를 받아 횟수만큼 원소를 넘깁니다.
	
◎ 결과 만들기
	- count : 개수를 반환합니다.
	- min/max/sum/average : 기본 타입 스트림에서 최소/최대/합/평균을 구합니다. 만약 스트림이 비어있다면 sum은 0을, 나머지는 Optional을 반환합니다.
	- forEach : 모든 요소를 돕니다.
	
	- reduce :
		- accumulator : 두 요소를 받아 한 요소를 반환하는 로직
		- identity : 초기값
		- combiner : 병렬 스트림에서 나눠 계산한 결과를 하나로 합치도록 동작하는 로직
		
	- collect : Collector 객체를 받아 결과를 반환합니다. 
		- Collectors.toList : 스트림의 결과를 리스트로 반환합니다.
		- Collectors.joining : 작업한 결과를 문자열로 묶어 반환한다. 구분자와 접두사, 접미사도 붙일 수 있다.
		- Collectors.{averaging/summing/summarzing}{Int/Long/Double} : Function 함수를 받아 평균/합계/통계를 반환합니다. 통계에는 갯수, 합계/평균, 최소/최대가 들어있습니다.
		- Collectors.groupingBy : Function 함수를 받아 Function의 결과에 따라 스트림의 결과를 묶어 Map<K, list<T>> 객체로 반환한다.
		- Collectors.partitioningBy : Predicate 함수를 받아 스트림 내 요소를 Map<boolean, List<T>> 객체로 반환한다.
		- Collectors.collectingAndThen : Collector와 Function을 받아 Collector의 작업을 수행하고 Function 함수를 거쳐 반환한다.
		- Collector.of :
			- supplier : 초기값을 만드는 Supplier 함수
			- accumulator : 두 요소를 받아 한 요소로 반환하는 함수
			- combiner : 나눠 계산한 결과를 하나로 합치는 함수
			
	- anyMatch/allMatch/noneMatch : 하나라도 조건을 만족하는지/모두 조건을 만족하는지/모두 조건을 만족하지 않는지 검사합니다.


◆ 기타